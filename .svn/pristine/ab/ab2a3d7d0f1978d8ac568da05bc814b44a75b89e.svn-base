// pages/user_info/my_order/my_order.js
const app = getApp();
const {http} = require('../../../utils/util.js');
const {mapToArray} = require('../../../utils/convert.js');
const {getOrderById,queryOrderByParams,findMarketSearch} = require('../../../utils/date.js');
const {payoff, submitOrderAndSignBack, requestPayment} = require('../../../utils/pay.js');

Page({

    /**
     * 页面的初始数据
     */
    data: {
      nabeiInfo: app.globalData.nabeiInfo,
      navTabs: [{
          title:"待付款",
          example: {      //查询条件
            pageIndex: 1,
            pageSize: 5,
            status: "20"
          },
          orders:[]
        },
        {
          title: "待拿货",
          example: {      //查询条件
            pageIndex: 1,
            pageSize: 5,
            status: "2"
          },
          orders: []
        },
        {
          title: "已完成",
          example: {      //查询条件
            pageIndex: 1,
            pageSize: 5,
            status: "99"
          },
          orders: []
        }],
        // 初始化将activeIndex置为0
        activeIndex: 0,
        //筛选
        markets:[],
        stalls:[],
        marketId: "",
        marketName: "全部市场",
        floorNum: "",
        floorName: "全部楼层",
        allFloor:[],
        hideMarket:true,
        hideFloor:true,
        keywords:"",
        isLocked: false,     //是否正在执行操作
        currOrderId:""    //当前选中的订单id
    },
    /**
     * 生命周期函数--监听页面加载
     */
    onLoad: function (options) {
      if (options.activeIndex) {
        this.setData({
          activeIndex: options.activeIndex
        });
      }
    },

    /**
     * 显示页面
     */
    onShow:function(){
      //在data中赋值为空
      this.setData({
        nabeiInfo: app.globalData.nabeiInfo
      });
      this.getOrder(this.data.activeIndex,true,true);
      this.findMarketSearch();
    },

    /**
     * 上拉
     */
    onReachBottom: function(){
      this.getOrder(this.data.activeIndex,true);
    },

    /**
    * 下拉刷新
    */
    onPullDownRefresh: function (e) {
      wx.stopPullDownRefresh();
      this.getOrder(this.data.activeIndex, true, true);
    },

    /**
     * nav item的tap事件
     */
    tapNavItem (e) {
      let activeIndex = e.currentTarget.dataset.id;
      this.getOrder(activeIndex,true);
    },

    /**
     * 根据当前选项加载订单信息 isReolad:强刷，isFirst:是否第一页加载起
     */
    getOrder(activeIndex, isReolad=false, isFirst=false){
      wx.showNavigationBarLoading();
      let that = this;
      let navTabs = this.data.navTabs;
      let orders = navTabs[activeIndex].orders;
      //切换tab，再加载数据
      this.setData({
        activeIndex: activeIndex
      });

      if (orders.length == 0 || isReolad){   //如果没有加载过数据，并且不是强刷,就加载数据
        let example = navTabs[activeIndex].example;
        example.marketId = this.data.marketId;
        example.floorNum = this.data.floorNum;
        example.keywords = this.data.keywords;
        example.companyId = app.globalData.nabeiInfo.compId;
        example.createUserId = app.globalData.nabeiInfo.user.id;

        if (isFirst) {    //从第一页加载起
          example.pageIndex = 1;
          navTabs[activeIndex].orders = [];
        }

        http({
          url: queryOrderByParams,
          data: example,
          func: data => {
            let result = data.result;
            let nos = result.results;
            for (let i in nos) { //格式化所有金额
              nos[i].totalFee = nos[i].totalFee.toFixed(2);
              let nods = nos[i].detailsVO;
              for(let j in nods){
                nods[j].price = nods[j].price.toFixed(2);
              }
            }
            navTabs[activeIndex].orders = navTabs[activeIndex].orders.concat(nos);
            if (result.totalCount > (example.pageIndex - 1 * example.pageSize)){    //有下一页就增加当前页码
              example.pageIndex++;
            } else {
              wx.showToast({
                title: "加载完毕",
                icon: "success",
                duration: 1000
              });
            }
            that.setData({
              navTabs: navTabs
            });
          },
          complete: function () {
            wx.hideNavigationBarLoading();
          }
        });
      }
    },

    /**
     * 查询筛选条件
     */
    findMarketSearch(){
      let that = this;
      let nabeiInfo = this.data.nabeiInfo;
      http({
        url: findMarketSearch,
        data: {
          createUserId: nabeiInfo.user.id
        },
        func: data => {
          let markets = data.result;
          let map = new Map();
          for (let i in markets) {
            for(let j in markets[i].stallList) {
              let floorNum = parseInt(markets[i].stallList[j].floorNum)
              map[floorNum]={
                floorNum: floorNum
              };
            }
          }
          let allFloor = mapToArray(map);
          this.setData({
            stalls: allFloor,
            allFloor:allFloor
          });
          // markets.unshift(
          //   {
          //     id:"",
          //     name:"全部",
          //     stallList: allFloor
          //     }
          // );
          that.setData({
            markets:markets
          });
        }
      });
    },

    /**
     * 点击市场
     */
    clickMarket(e) {
      let that = this;
      if (this.data.hideMarket){
        setTimeout(() => {      //在allClick之后执行
          that.setData({
            hideMarket: !that.data.hideMarket
          });
        },100);
      }
    },

  /**
   * 选择市场
   */
    selectMarket(e){
      let index = e.currentTarget.dataset.index;
      if(index === "") {   //选择全部市场，就列出所有楼层
        this.setData({
          marketId: "",
          marketName: "全部市场",
          stalls: this.data.allFloor,
          hideMarket: true,
          hideFloor: false
        })
      } else {  //选择某个市场，就列出该市场楼层
        let market = this.data.markets[index];
        this.setData({
          marketId:market.id,
          marketName: market.name,
          stalls: market.stallList,
          hideMarket: true,
          hideFloor:false  
        })
      }
      //查询数据
      this.search();
    },

    /**
     * 点击楼层
     */
    clickFloor(e) {
      let that = this;
      if (this.data.hideFloor) { 
        setTimeout(() => {        //在allClick之后执行
          that.setData({
            hideFloor: !that.data.hideFloor
          });
        }, 100);
      }
    },

    /**
     * 选择楼层
     */
    selectFloor(e) {
      let index = e.currentTarget.dataset.index;
      if(index === "") {    //选择全部楼层
        this.setData({
          floorNum: "",
          floorName: "全部楼层",
          hideFloor: true
        })
      } else {
        let stall = this.data.stalls[index];
        this.setData({
          floorNum: stall.floorNum,
          floorName: stall.floorNum + "楼",
          hideFloor: true
        })
      }
      //查询数据
      this.search();
    },
    
    /**
     * 输入关键词
     */
    inputKeywords(e){
      this.setData({
        keywords: e.detail.value
      });
    },

    /**
     * 清除选项
     */
    clearInput(){
      this.setData({
        keywords:""
      });
      //查询数据
      this.search();
    },

    /**
     * 查询
     */
    search(){
      this.getOrder(this.data.activeIndex, true, true);
    },

    /**
     * 点击其他地方就隐藏搜索栏
     */
    allClick(e) {
      this.setData({
        hideMarket:true,
        hideFloor: true
      })
    },
    
    /**
     * 去支付
     */
    goPay(e){
      let that = this;
      //设置提交按钮失效
      this.setData({
        isLocked: true,
        currOrderId:e.currentTarget.dataset.id
      });

      //弹出支付页面
      const orderId = e.currentTarget.dataset.id;
      http({
        url: getOrderById,
        data: {
          id: orderId
        },
        func: data => {
          let order = data.result;
          if (data.isSuccess) {
            //弹出支付界面
            that.orderids = new Array();
            that.orderids.push(order.id)//订单ids
            that.orderTotalFee = order.totalFee// 传入订单金额
            that.succCall = that.paySucc;
            that.failCall = that.payFail;
            that.payoff(that);
          } else {
            wx.showToast({
              title: '支付失败',
              icon: 'none'
            });
            //设置提交按钮失效
            this.setData({
              isLocked: false
            });
          }
        }
      });
    },

    //支付成功
    paySucc() {
      this.onShow();
      //跳转至订单详情页
      wx.navigateTo({
        url: `../orderDetail/orderDetail?id=` + this.data.currOrderId
      })
      this.setData({
        isLocked: false
      });
    },

    //支付失败
    payFail({ errorMsg }) {
      let that = this;
      wx.showToast({
        title: errorMsg,
        icon: 'none',
        complete: () => {
          //跳转到订单列表页
          setTimeout(function () {
            that.onShow();
            that.setData({
              isLocked: false
            });
          }, 1500);
        }
      });
    },
    
    /**
     * tap当前订单去当前订单详情页
     */
    goOrderDetail(e) {
        // 获取当前订单的ID作为值传入url中
      const orderId = e.currentTarget.dataset.id;
      wx.navigateTo({
        url: `../orderDetail/orderDetail?id=${orderId}`
      })
    },

    /**
     * 跳转至档口主页
     */
    goStallStore(e) {
      let stallId = e.currentTarget.dataset.stallId;
      let companyId = e.currentTarget.dataset.companyId;
      wx.navigateTo({
        url: `../../index/stallStore/stallStore?stallId=${stallId}&companyId=${companyId}`
      })
    },
    payoff, submitOrderAndSignBack, requestPayment
})